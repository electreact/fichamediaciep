{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","baseUrl","useState","data","setData","modalInsertar","setModalInsertar","modalEditar","setModalEditar","modalEliminar","setModalEliminar","rut","nombres","apellidos","direccion","ciudad","telefono","email","fechaNacto","estCivil","comentarios","PacientesSeleccionado","setPacientesSeleccionado","handleChange","e","target","name","value","prevState","console","log","abrirCerrarModalInsertar","abrirCerrarModalEditar","abrirCerrarModalEliminar","peticionGet","a","axios","get","then","response","catch","error","peticionPost","f","FormData","append","post","concat","peticionPut","params","dataNueva","map","Pacientes","peticionDelete","filter","seleccionarPacientes","caso","useEffect","style","textAlign","className","onClick","key","Modal","isOpen","ModalHeader","ModalBody","type","onChange","ModalFooter","nombre","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f3959792.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\nimport axios from 'axios';\n\nfunction App() {\n  const baseUrl=\"http://fichamedicaiep.orgfree.com/\";\n  const [data, setData]=useState([]);\n  const [modalInsertar, setModalInsertar]= useState(false);\n  const [modalEditar, setModalEditar]= useState(false);\n  const [modalEliminar, setModalEliminar]= useState(false);\n  const [PacientesSeleccionado, setPacientesSeleccionado]=useState({\n    rut: '',\n    nombres: '',\n    apellidos: '',\n    direccion: '',\n    ciudad: '',\n    telefono: '',\n    email: '',\n    fechaNacto: '',\n    estCivil: '',\n    comentarios: '',\n  });\n\n  const handleChange=e=>{\n    const {name, value}=e.target;\n    setPacientesSeleccionado((prevState)=>({\n      ...prevState,\n      [name]: value\n    }))\n    console.log(PacientesSeleccionado);\n  }\n\n  const abrirCerrarModalInsertar=()=>{\n    setModalInsertar(!modalInsertar);\n  }\n\n  const abrirCerrarModalEditar=()=>{\n    setModalEditar(!modalEditar);\n  }\n\n  const abrirCerrarModalEliminar=()=>{\n    setModalEliminar(!modalEliminar);\n  }\n\n  const peticionGet=async()=>{\n    await axios.get(baseUrl)\n    .then(response=>{\n      setData(response.data);\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionPost=async()=>{\n    var f = new FormData();\n    f.append(\"nombres\", PacientesSeleccionado.nombres);\n    f.append(\"apellidos\", PacientesSeleccionado.apellidos);\n    f.append(\"direccion\", PacientesSeleccionado.direccion);\n    f.append(\"ciudad\", PacientesSeleccionado.ciudad);\n    f.append(\"telefono\", PacientesSeleccionado.telefono);\n    f.append(\"email\", PacientesSeleccionado.email);\n    f.append(\"fechaNacto\", PacientesSeleccionado.fechaNacto);\n    f.append(\"estCivil\", PacientesSeleccionado.estCivil);\n    f.append(\"comentarios\", PacientesSeleccionado.comentarios);\n    f.append(\"METHOD\", \"POST\");\n    await axios.post(baseUrl, f)\n    .then(response=>{\n      setData(data.concat(response.data));\n      abrirCerrarModalInsertar();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionPut=async()=>{\n    var f = new FormData();\n    f.append(\"nombres\", PacientesSeleccionado.nombres);\n    f.append(\"apellidos\", PacientesSeleccionado.apellidos);\n    f.append(\"direccion\", PacientesSeleccionado.direccion);\n    f.append(\"ciudad\", PacientesSeleccionado.ciudad);\n    f.append(\"telefono\", PacientesSeleccionado.telefono);\n    f.append(\"email\", PacientesSeleccionado.email);\n    f.append(\"fechaNacto\", PacientesSeleccionado.fechaNacto);\n    f.append(\"estCivil\", PacientesSeleccionado.estCivil);\n    f.append(\"comentarios\", PacientesSeleccionado.comentarios);\n    f.append(\"METHOD\", \"PUT\");\n    await axios.post(baseUrl, f, {params: {rut: PacientesSeleccionado.rut}})\n    .then(response=>{\n      var dataNueva= data;\n      dataNueva.map(Pacientes=>{\n        if(Pacientes.rut===PacientesSeleccionado.rut){\n          Pacientes.nombres=PacientesSeleccionado.nombres;\n          Pacientes.apellidos=PacientesSeleccionado.apellidos;\n          Pacientes.direccion=PacientesSeleccionado.direccion;\n          Pacientes.ciudad=PacientesSeleccionado.ciudad;\n          Pacientes.telefono=PacientesSeleccionado.telefono;\n          Pacientes.email=PacientesSeleccionado.email;\n          Pacientes.fechaNacto=PacientesSeleccionado.fechaNacto;\n          Pacientes.estCivil=PacientesSeleccionado.estCivil;\n          Pacientes.comentarios=PacientesSeleccionado.comentarios;\n        }\n      });\n      setData(dataNueva);\n      abrirCerrarModalEditar();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const peticionDelete=async()=>{\n    var f = new FormData();\n    f.append(\"METHOD\", \"DELETE\");\n    await axios.post(baseUrl, f, {params: {rut: PacientesSeleccionado.rut}})\n    .then(response=>{\n      setData(data.filter(Pacientes=>Pacientes.rut!==PacientesSeleccionado.rut));\n      abrirCerrarModalEliminar();\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  const seleccionarPacientes=(Pacientes, caso)=>{\n    setPacientesSeleccionado(Pacientes);\n\n    (caso===\"Editar\")?\n    abrirCerrarModalEditar():\n    abrirCerrarModalEliminar()\n  }\n\n  useEffect(()=>{\n    peticionGet();\n  },[])\n\n  return (\n    <div style={{textAlign: 'center'}}>\n<br />\n      <button className=\"btn btn-success\" onClick={()=>abrirCerrarModalInsertar()}>Insertar</button>\n      <br /><br />\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>RUT</th>\n          <th>Nombres</th>\n          <th>Apellidos</th>\n          <th>Direccion</th>\n          <th>Ciudad</th>\n          <th>Telefono</th>\n          <th>Email</th>\n          <th>Fecha de nacimiento</th>\n          <th>Estado civil</th>\n          <th>Comentarios</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map(Pacientes=>(\n          <tr key={Pacientes.rut}>\n            <td>{Pacientes.rut}</td>\n            <td>{Pacientes.nombres}</td>\n            <td>{Pacientes.apellidos}</td>\n            <td>{Pacientes.direccion}</td>\n            <td>{Pacientes.ciudad}</td>\n            <td>{Pacientes.telefono}</td>\n            <td>{Pacientes.email}</td>\n            <td>{Pacientes.fechaNacto}</td>\n            <td>{Pacientes.estCivil}</td>\n            <td>{Pacientes.comentarios}</td>\n          <td>\n          <button className=\"btn btn-primary\" onClick={()=>seleccionarPacientes(Pacientes, \"Editar\")}>Editar</button> {\"  \"}\n          <button className=\"btn btn-danger\" onClick={()=>seleccionarPacientes(Pacientes, \"Eliminar\")}>Eliminar</button>\n          </td>\n          </tr>\n        ))}\n\n\n      </tbody> \n\n    </table>\n\n\n    <Modal isOpen={modalInsertar}>\n      <ModalHeader>Agregar Paciente</ModalHeader>\n      <ModalBody>\n        <div className=\"form-group\">\n          <label>Nombre: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"nombre\" onChange={handleChange}/>\n          <br />\n          <label>Apellidos: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"apellidos\" onChange={handleChange}/>\n          <br />\n          <label>Direccion: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"direccion\" onChange={handleChange}/>\n          <br />\n          <label>Ciudad: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"ciudad\" onChange={handleChange}/>\n          <br />\n          <label>Telefono: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"telefono\" onChange={handleChange}/>\n          <br />\n          <label>Email: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"email\" onChange={handleChange}/>\n          <br />\n          <label>Fecha Nacimiento: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"fechaNacto\" onChange={handleChange}/>\n          <br />\n          <label>Estado Civil: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"estCivil\" onChange={handleChange}/>\n          <br />\n          <label>Comentarios: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"comentarios\" onChange={handleChange}/>\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <button className=\"btn btn-primary\" onClick={()=>peticionPost()}>Insertar</button>{\"   \"}\n        <button className=\"btn btn-danger\" onClick={()=>abrirCerrarModalInsertar()}>Cancelar</button>\n      </ModalFooter>\n    </Modal>\n\n\n    \n    <Modal isOpen={modalEditar}>\n      <ModalHeader>Editar Paciente</ModalHeader>\n      <ModalBody>\n        <div className=\"form-group\">\n          <label>Nombres: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"nombres\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.nombres}/>\n          <br />\n          <label>Apellidos: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"apellidos\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.apellidos}/>\n          <br />\n          <label>Direccion: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"direccion\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.direccion}/>\n          <br />\n          <label>Ciudad: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"ciudad\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.ciudad}/>\n          <br />\n          <label>Telefono: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"telefono\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.telefono}/>\n          <br />\n          <label>Email: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"email\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.email}/>\n          <br />\n          <label>Fecha de nacimiento: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"fechaNacto\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.fechaNacto}/>\n          <br />\n          <label>Estado civil: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"estCivil\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.estCivil}/>\n          <br />\n          <label>Comentarios: </label>\n          <br />\n          <input type=\"text\" className=\"form-control\" name=\"comentarios\" onChange={handleChange} value={PacientesSeleccionado && PacientesSeleccionado.comentarios}/>\n          <br />\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <button className=\"btn btn-primary\" onClick={()=>peticionPut()}>Editar</button>{\"   \"}\n        <button className=\"btn btn-danger\" onClick={()=>abrirCerrarModalEditar()}>Cancelar</button>\n      </ModalFooter>\n    </Modal>\n\n    <Modal isOpen={modalEliminar}>\n        <ModalBody>\n        ¿Estás seguro de que deseas quitar al o la Paciente? {PacientesSeleccionado && PacientesSeleccionado.nombre}?\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-danger\" onClick={()=>peticionDelete()}>\n            Sí\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            onClick={()=>abrirCerrarModalEliminar()}\n          >\n            No\n          </button>\n        </ModalFooter>\n      </Modal>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}